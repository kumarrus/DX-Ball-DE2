//cycles for 50MHz for the ball's position to update (i.e. ballX = ballX + ballVx)
param ballCyclesToUpdate = 5000000; //at most, 10 px/sec ---------------------------  (50,000,000 cycles/sec) / (10 px/sec) ------------> 1 px per 5,000,000 cycles   
param ballRadius = 8; -- to big? radius 2 should be fine.. (gives a 4x4 img)


      
      
//ball's position (top left corner)
reg [7:0] ballX;
reg [6:0] ballY;
//ball's speed in x and y direction
//Vx + => move right
//Vy + => move down
reg ballVx, ballVy;

/*
      DO NEGATIVE VALUES NEED ONE MORE BIT?
*/

//INITIAL SETTINGS
initial begin
  ballVx = 1;
  ballVy = 1;
  ballX = 20;
  ballY = 95;
end

//should work something like this ---> done , implemented something like this in my code.. its under module "plotter".... but this takes into account only the edges of the screen..
// we need to have somthing that takes care of the paddle collision

reg [25:0] counter;
always @(posedge clock) begin

  if (counter % ballCyclesToUpdate == 0) begin
  
    //update position
    ballX <= ballX + ballVx;
    ballY <= ballY + ballVy;
    //check collision and update new position
    //make sure only one possible assignment for ballVx and ballVy
    
    //Ball hits left edge of screen
    if (ballX <= 1'b0)
      ballVx = 
  
  end //end updateBall

end
