INPUTS
- paddleLeft -> mv paddle to left
- paddleRight-> "           "right

OUTPUTS
- ball_X
- ball_Y
- paddleX
- gameOver

//cycles for 50MHz for the ball_'s position to update (i.e. ball_X = ball_X + ball_Vx)
param ball_CyclesToUpdate = 5000000; //at most, 10 px/sec ---------------------------  (50,000,000 cycles/sec) / (10 px/sec) ------------> 1 px per 5,000,000 cycles   
param paddle_CyclesToMove = 1010101;
param ball_Radius = 8; // to big? radius 2 should be fine.. (gives a 4x4 img)
param maxX = 159;
param maxY = 119;
param paddle_Length = 20;

param ball_initialX = 20;
param ball_initialY = 95;


/* GAME INFORMATION */
reg gameOver;

/* PADDLE INFORMATION */
reg [7:0] paddle_X;
reg [6:0] paddle_Y;

      
/* ball_ INFORMATION */
      // right => increase x
      // down => increase y
reg [7:0] ball_X;
reg [6:0] ball_Y;
reg ball_Left, ball_Right; //always inverse of each other
reg ball_Up, ball_Down; //always inverse of each other

//INITIAL SETTINGS (Or when reset)
initial begin
  ball_X = ball_initialX;
  ball_Y = ball_initialY;
  ball_Right = 1;
  ball_Down = 1;
  paddle_Y = 'd0;
  paddle_X = 'd59 - paddle_Length;
end

//should work something like this ---> done , implemented something like this in my code.. its under module "plotter".... but this takes into account only the edges of the screen..
// we need to have somthing that takes care of the paddle collision

reg [25:0] counter;
always @(posedge clock) begin

  // <------------- UPDATE BALL ---------->
  if (counter % ball_CyclesToUpdate == 0) begin
    ball_X <= ball_X - ball_Left + ball_Right;
    ball_Y <= ball_Y + ball_Down - ball_Up;
    
    // <------------ BALL COLLISION ---------------> 
    // <- Corner cases not accurately handled, but it should be unnoticable
    
    if (ball_X == 'd0 || (ball_X + 'd2*ball_Radius) >= maxX) begin //SCREEN COLLISION IN X
      ball_Left <= ~ball_Left;
      ball_Right <= ~ball_Right;
    end else if (ball_Y == 'd0) begin //SCREEN COLLISION ON TOP OF SCREEN
      ball_Up <= ~ball_Up;
      ball_Down <= ~ball_Down;
    end else if ( (ball_Y + 'd2 * ball_Radius) == maxY) begin //SCREEN COLLISION ON BOTTOM OF SCREEN
      if ( ((ball_X + ball_Radius) > paddle_X) && ((ball_X + ball_Radius) < (paddle_X + paddle_Length)) ) begin
            ball_Up <= ~ball_Up;
            ball_Down <= ~ball_Down;           
      else if ( (ball_Left && ( (ball_X < paddle_X + paddle_Length) && (ball_X > paddle_X) ) ) ||
            ( ball_Right && (ball_X < paddle_X) && ((ball_X + 2 * ball_Radius) > paddle_X) ) begin
            ball_Up <= ~ball_Up;
            ball_Down <= ~ball_Down;
            ball_Left <= ~ball_Left;
            ball_Right <= ~ball_Right;
      end else 
            gameOver = 1'b1;
      end
    end
  end //end update ball
  
  // <---------------- UPDATE PADDLE ------------->
  if (counter % paddle_CyclesToUpdate == 0) begin
      if (paddleLeft)
            paddle_X <= paddle_X - 1'b1;
      else if (paddleRight)
            paddle_X <= paddle_X + 1'b1;
  end //end update paddle
  
end //end always posedge clk block
